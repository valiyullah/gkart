/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sample.model.GKartItems;
import com.liferay.sample.model.GKartItemsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GKartItems service. Represents a row in the &quot;GKart_GKartItems&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.GKartItemsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GKartItemsImpl}.
 * </p>
 *
 * @author Valiyullah
 * @see GKartItemsImpl
 * @see com.liferay.sample.model.GKartItems
 * @see com.liferay.sample.model.GKartItemsModel
 * @generated
 */
public class GKartItemsModelImpl extends BaseModelImpl<GKartItems>
	implements GKartItemsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g kart items model instance should use the {@link com.liferay.sample.model.GKartItems} interface instead.
	 */
	public static final String TABLE_NAME = "GKart_GKartItems";
	public static final Object[][] TABLE_COLUMNS = {
			{ "itemId", Types.BIGINT },
			{ "catName", Types.VARCHAR },
			{ "catId", Types.INTEGER },
			{ "itemName", Types.VARCHAR },
			{ "itemDesc", Types.VARCHAR },
			{ "brandName", Types.VARCHAR },
			{ "price", Types.BIGINT },
			{ "quantity", Types.INTEGER },
			{ "units", Types.VARCHAR },
			{ "image", Types.VARCHAR },
			{ "brandDesc", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GKart_GKartItems (itemId LONG not null primary key,catName VARCHAR(75) null,catId INTEGER,itemName VARCHAR(75) null,itemDesc VARCHAR(75) null,brandName VARCHAR(75) null,price LONG,quantity INTEGER,units VARCHAR(75) null,image VARCHAR(75) null,brandDesc VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GKart_GKartItems";
	public static final String ORDER_BY_JPQL = " ORDER BY gKartItems.itemName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GKart_GKartItems.itemName ASC";
	public static final String DATA_SOURCE = "GkartDataSource";
	public static final String SESSION_FACTORY = "GkartSessionFactory";
	public static final String TX_MANAGER = "GkartTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.GKartItems"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.GKartItems"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.sample.model.GKartItems"),
			true);
	public static long BRANDNAME_COLUMN_BITMASK = 1L;
	public static long CATID_COLUMN_BITMASK = 2L;
	public static long ITEMNAME_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.GKartItems"));

	public GKartItemsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GKartItems.class;
	}

	@Override
	public String getModelClassName() {
		return GKartItems.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemId", getItemId());
		attributes.put("catName", getCatName());
		attributes.put("catId", getCatId());
		attributes.put("itemName", getItemName());
		attributes.put("itemDesc", getItemDesc());
		attributes.put("brandName", getBrandName());
		attributes.put("price", getPrice());
		attributes.put("quantity", getQuantity());
		attributes.put("units", getUnits());
		attributes.put("image", getImage());
		attributes.put("brandDesc", getBrandDesc());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long itemId = (Long)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		String catName = (String)attributes.get("catName");

		if (catName != null) {
			setCatName(catName);
		}

		Integer catId = (Integer)attributes.get("catId");

		if (catId != null) {
			setCatId(catId);
		}

		String itemName = (String)attributes.get("itemName");

		if (itemName != null) {
			setItemName(itemName);
		}

		String itemDesc = (String)attributes.get("itemDesc");

		if (itemDesc != null) {
			setItemDesc(itemDesc);
		}

		String brandName = (String)attributes.get("brandName");

		if (brandName != null) {
			setBrandName(brandName);
		}

		Long price = (Long)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Integer quantity = (Integer)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		String units = (String)attributes.get("units");

		if (units != null) {
			setUnits(units);
		}

		String image = (String)attributes.get("image");

		if (image != null) {
			setImage(image);
		}

		String brandDesc = (String)attributes.get("brandDesc");

		if (brandDesc != null) {
			setBrandDesc(brandDesc);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getItemId() {
		return _itemId;
	}

	@Override
	public void setItemId(long itemId) {
		_itemId = itemId;
	}

	@Override
	public String getCatName() {
		if (_catName == null) {
			return StringPool.BLANK;
		}
		else {
			return _catName;
		}
	}

	@Override
	public void setCatName(String catName) {
		_catName = catName;
	}

	@Override
	public int getCatId() {
		return _catId;
	}

	@Override
	public void setCatId(int catId) {
		_columnBitmask |= CATID_COLUMN_BITMASK;

		if (!_setOriginalCatId) {
			_setOriginalCatId = true;

			_originalCatId = _catId;
		}

		_catId = catId;
	}

	public int getOriginalCatId() {
		return _originalCatId;
	}

	@Override
	public String getItemName() {
		if (_itemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemName;
		}
	}

	@Override
	public void setItemName(String itemName) {
		_columnBitmask = -1L;

		if (_originalItemName == null) {
			_originalItemName = _itemName;
		}

		_itemName = itemName;
	}

	public String getOriginalItemName() {
		return GetterUtil.getString(_originalItemName);
	}

	@Override
	public String getItemDesc() {
		if (_itemDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemDesc;
		}
	}

	@Override
	public void setItemDesc(String itemDesc) {
		_itemDesc = itemDesc;
	}

	@Override
	public String getBrandName() {
		if (_brandName == null) {
			return StringPool.BLANK;
		}
		else {
			return _brandName;
		}
	}

	@Override
	public void setBrandName(String brandName) {
		_columnBitmask |= BRANDNAME_COLUMN_BITMASK;

		if (_originalBrandName == null) {
			_originalBrandName = _brandName;
		}

		_brandName = brandName;
	}

	public String getOriginalBrandName() {
		return GetterUtil.getString(_originalBrandName);
	}

	@Override
	public long getPrice() {
		return _price;
	}

	@Override
	public void setPrice(long price) {
		_price = price;
	}

	@Override
	public int getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(int quantity) {
		_quantity = quantity;
	}

	@Override
	public String getUnits() {
		if (_units == null) {
			return StringPool.BLANK;
		}
		else {
			return _units;
		}
	}

	@Override
	public void setUnits(String units) {
		_units = units;
	}

	@Override
	public String getImage() {
		if (_image == null) {
			return StringPool.BLANK;
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		_image = image;
	}

	@Override
	public String getBrandDesc() {
		if (_brandDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _brandDesc;
		}
	}

	@Override
	public void setBrandDesc(String brandDesc) {
		_brandDesc = brandDesc;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GKartItems.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GKartItems toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GKartItems)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GKartItemsImpl gKartItemsImpl = new GKartItemsImpl();

		gKartItemsImpl.setItemId(getItemId());
		gKartItemsImpl.setCatName(getCatName());
		gKartItemsImpl.setCatId(getCatId());
		gKartItemsImpl.setItemName(getItemName());
		gKartItemsImpl.setItemDesc(getItemDesc());
		gKartItemsImpl.setBrandName(getBrandName());
		gKartItemsImpl.setPrice(getPrice());
		gKartItemsImpl.setQuantity(getQuantity());
		gKartItemsImpl.setUnits(getUnits());
		gKartItemsImpl.setImage(getImage());
		gKartItemsImpl.setBrandDesc(getBrandDesc());
		gKartItemsImpl.setCreateDate(getCreateDate());
		gKartItemsImpl.setModifiedDate(getModifiedDate());

		gKartItemsImpl.resetOriginalValues();

		return gKartItemsImpl;
	}

	@Override
	public int compareTo(GKartItems gKartItems) {
		int value = 0;

		value = getItemName().compareTo(gKartItems.getItemName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GKartItems)) {
			return false;
		}

		GKartItems gKartItems = (GKartItems)obj;

		long primaryKey = gKartItems.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		GKartItemsModelImpl gKartItemsModelImpl = this;

		gKartItemsModelImpl._originalCatId = gKartItemsModelImpl._catId;

		gKartItemsModelImpl._setOriginalCatId = false;

		gKartItemsModelImpl._originalItemName = gKartItemsModelImpl._itemName;

		gKartItemsModelImpl._originalBrandName = gKartItemsModelImpl._brandName;

		gKartItemsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GKartItems> toCacheModel() {
		GKartItemsCacheModel gKartItemsCacheModel = new GKartItemsCacheModel();

		gKartItemsCacheModel.itemId = getItemId();

		gKartItemsCacheModel.catName = getCatName();

		String catName = gKartItemsCacheModel.catName;

		if ((catName != null) && (catName.length() == 0)) {
			gKartItemsCacheModel.catName = null;
		}

		gKartItemsCacheModel.catId = getCatId();

		gKartItemsCacheModel.itemName = getItemName();

		String itemName = gKartItemsCacheModel.itemName;

		if ((itemName != null) && (itemName.length() == 0)) {
			gKartItemsCacheModel.itemName = null;
		}

		gKartItemsCacheModel.itemDesc = getItemDesc();

		String itemDesc = gKartItemsCacheModel.itemDesc;

		if ((itemDesc != null) && (itemDesc.length() == 0)) {
			gKartItemsCacheModel.itemDesc = null;
		}

		gKartItemsCacheModel.brandName = getBrandName();

		String brandName = gKartItemsCacheModel.brandName;

		if ((brandName != null) && (brandName.length() == 0)) {
			gKartItemsCacheModel.brandName = null;
		}

		gKartItemsCacheModel.price = getPrice();

		gKartItemsCacheModel.quantity = getQuantity();

		gKartItemsCacheModel.units = getUnits();

		String units = gKartItemsCacheModel.units;

		if ((units != null) && (units.length() == 0)) {
			gKartItemsCacheModel.units = null;
		}

		gKartItemsCacheModel.image = getImage();

		String image = gKartItemsCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			gKartItemsCacheModel.image = null;
		}

		gKartItemsCacheModel.brandDesc = getBrandDesc();

		String brandDesc = gKartItemsCacheModel.brandDesc;

		if ((brandDesc != null) && (brandDesc.length() == 0)) {
			gKartItemsCacheModel.brandDesc = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			gKartItemsCacheModel.createDate = createDate.getTime();
		}
		else {
			gKartItemsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			gKartItemsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			gKartItemsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return gKartItemsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{itemId=");
		sb.append(getItemId());
		sb.append(", catName=");
		sb.append(getCatName());
		sb.append(", catId=");
		sb.append(getCatId());
		sb.append(", itemName=");
		sb.append(getItemName());
		sb.append(", itemDesc=");
		sb.append(getItemDesc());
		sb.append(", brandName=");
		sb.append(getBrandName());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", units=");
		sb.append(getUnits());
		sb.append(", image=");
		sb.append(getImage());
		sb.append(", brandDesc=");
		sb.append(getBrandDesc());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.GKartItems");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catName</column-name><column-value><![CDATA[");
		sb.append(getCatName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catId</column-name><column-value><![CDATA[");
		sb.append(getCatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemName</column-name><column-value><![CDATA[");
		sb.append(getItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemDesc</column-name><column-value><![CDATA[");
		sb.append(getItemDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandName</column-name><column-value><![CDATA[");
		sb.append(getBrandName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>units</column-name><column-value><![CDATA[");
		sb.append(getUnits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>image</column-name><column-value><![CDATA[");
		sb.append(getImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandDesc</column-name><column-value><![CDATA[");
		sb.append(getBrandDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GKartItems.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GKartItems.class
		};
	private long _itemId;
	private String _catName;
	private int _catId;
	private int _originalCatId;
	private boolean _setOriginalCatId;
	private String _itemName;
	private String _originalItemName;
	private String _itemDesc;
	private String _brandName;
	private String _originalBrandName;
	private long _price;
	private int _quantity;
	private String _units;
	private String _image;
	private String _brandDesc;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private GKartItems _escapedModel;
}