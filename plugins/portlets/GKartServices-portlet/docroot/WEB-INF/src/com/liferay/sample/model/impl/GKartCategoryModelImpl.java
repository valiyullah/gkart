/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sample.model.GKartCategory;
import com.liferay.sample.model.GKartCategoryModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GKartCategory service. Represents a row in the &quot;GKart_GKartCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.GKartCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GKartCategoryImpl}.
 * </p>
 *
 * @author Valiyullah
 * @see GKartCategoryImpl
 * @see com.liferay.sample.model.GKartCategory
 * @see com.liferay.sample.model.GKartCategoryModel
 * @generated
 */
public class GKartCategoryModelImpl extends BaseModelImpl<GKartCategory>
	implements GKartCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g kart category model instance should use the {@link com.liferay.sample.model.GKartCategory} interface instead.
	 */
	public static final String TABLE_NAME = "GKart_GKartCategory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "catId", Types.BIGINT },
			{ "catName", Types.VARCHAR },
			{ "subcatdId", Types.INTEGER },
			{ "subcatName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GKart_GKartCategory (catId LONG not null primary key,catName VARCHAR(75) null,subcatdId INTEGER,subcatName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GKart_GKartCategory";
	public static final String ORDER_BY_JPQL = " ORDER BY gKartCategory.catName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GKart_GKartCategory.catName ASC";
	public static final String DATA_SOURCE = "GkartDataSource";
	public static final String SESSION_FACTORY = "GkartSessionFactory";
	public static final String TX_MANAGER = "GkartTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.GKartCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.GKartCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.sample.model.GKartCategory"),
			true);
	public static long CATNAME_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.GKartCategory"));

	public GKartCategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _catId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCatId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _catId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GKartCategory.class;
	}

	@Override
	public String getModelClassName() {
		return GKartCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("catId", getCatId());
		attributes.put("catName", getCatName());
		attributes.put("subcatdId", getSubcatdId());
		attributes.put("subcatName", getSubcatName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long catId = (Long)attributes.get("catId");

		if (catId != null) {
			setCatId(catId);
		}

		String catName = (String)attributes.get("catName");

		if (catName != null) {
			setCatName(catName);
		}

		Integer subcatdId = (Integer)attributes.get("subcatdId");

		if (subcatdId != null) {
			setSubcatdId(subcatdId);
		}

		String subcatName = (String)attributes.get("subcatName");

		if (subcatName != null) {
			setSubcatName(subcatName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getCatId() {
		return _catId;
	}

	@Override
	public void setCatId(long catId) {
		_catId = catId;
	}

	@Override
	public String getCatName() {
		if (_catName == null) {
			return StringPool.BLANK;
		}
		else {
			return _catName;
		}
	}

	@Override
	public void setCatName(String catName) {
		_columnBitmask = -1L;

		if (_originalCatName == null) {
			_originalCatName = _catName;
		}

		_catName = catName;
	}

	public String getOriginalCatName() {
		return GetterUtil.getString(_originalCatName);
	}

	@Override
	public int getSubcatdId() {
		return _subcatdId;
	}

	@Override
	public void setSubcatdId(int subcatdId) {
		_subcatdId = subcatdId;
	}

	@Override
	public String getSubcatName() {
		if (_subcatName == null) {
			return StringPool.BLANK;
		}
		else {
			return _subcatName;
		}
	}

	@Override
	public void setSubcatName(String subcatName) {
		_subcatName = subcatName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GKartCategory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GKartCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GKartCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GKartCategoryImpl gKartCategoryImpl = new GKartCategoryImpl();

		gKartCategoryImpl.setCatId(getCatId());
		gKartCategoryImpl.setCatName(getCatName());
		gKartCategoryImpl.setSubcatdId(getSubcatdId());
		gKartCategoryImpl.setSubcatName(getSubcatName());
		gKartCategoryImpl.setCreateDate(getCreateDate());
		gKartCategoryImpl.setModifiedDate(getModifiedDate());

		gKartCategoryImpl.resetOriginalValues();

		return gKartCategoryImpl;
	}

	@Override
	public int compareTo(GKartCategory gKartCategory) {
		int value = 0;

		value = getCatName().compareTo(gKartCategory.getCatName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GKartCategory)) {
			return false;
		}

		GKartCategory gKartCategory = (GKartCategory)obj;

		long primaryKey = gKartCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		GKartCategoryModelImpl gKartCategoryModelImpl = this;

		gKartCategoryModelImpl._originalCatName = gKartCategoryModelImpl._catName;

		gKartCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GKartCategory> toCacheModel() {
		GKartCategoryCacheModel gKartCategoryCacheModel = new GKartCategoryCacheModel();

		gKartCategoryCacheModel.catId = getCatId();

		gKartCategoryCacheModel.catName = getCatName();

		String catName = gKartCategoryCacheModel.catName;

		if ((catName != null) && (catName.length() == 0)) {
			gKartCategoryCacheModel.catName = null;
		}

		gKartCategoryCacheModel.subcatdId = getSubcatdId();

		gKartCategoryCacheModel.subcatName = getSubcatName();

		String subcatName = gKartCategoryCacheModel.subcatName;

		if ((subcatName != null) && (subcatName.length() == 0)) {
			gKartCategoryCacheModel.subcatName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			gKartCategoryCacheModel.createDate = createDate.getTime();
		}
		else {
			gKartCategoryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			gKartCategoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			gKartCategoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return gKartCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{catId=");
		sb.append(getCatId());
		sb.append(", catName=");
		sb.append(getCatName());
		sb.append(", subcatdId=");
		sb.append(getSubcatdId());
		sb.append(", subcatName=");
		sb.append(getSubcatName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.GKartCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>catId</column-name><column-value><![CDATA[");
		sb.append(getCatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catName</column-name><column-value><![CDATA[");
		sb.append(getCatName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subcatdId</column-name><column-value><![CDATA[");
		sb.append(getSubcatdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subcatName</column-name><column-value><![CDATA[");
		sb.append(getSubcatName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GKartCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GKartCategory.class
		};
	private long _catId;
	private String _catName;
	private String _originalCatName;
	private int _subcatdId;
	private String _subcatName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private GKartCategory _escapedModel;
}